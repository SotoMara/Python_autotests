{"name": "test_first", "status": "skipped", "statusDetails": {"message": "XFAIL Wait for fix bug\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <h2 class=\"faq-title\">...</h2> is not clickable at point (951, 599). Other element would receive the click: <div class=\"razzi-faq\">...</div>\n  (Session info: chrome=122.0.6261.69)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6630F4C82+3505170]\n\t(No symbol) [0x00007FF662D20852]\n\t(No symbol) [0x00007FF662BD4145]\n\t(No symbol) [0x00007FF662C20C70]\n\t(No symbol) [0x00007FF662C1EA9B]\n\t(No symbol) [0x00007FF662C1C2A4]\n\t(No symbol) [0x00007FF662C1B035]\n\t(No symbol) [0x00007FF662C0F978]\n\t(No symbol) [0x00007FF662C3BE8A]\n\t(No symbol) [0x00007FF662C0F27A]\n\t(No symbol) [0x00007FF662C3C0A0]\n\t(No symbol) [0x00007FF662C583B2]\n\t(No symbol) [0x00007FF662C3BC33]\n\t(No symbol) [0x00007FF662C0D618]\n\t(No symbol) [0x00007FF662C0E6B1]\n\tGetHandleVerifier [0x00007FF6631267DD+3708781]\n\tGetHandleVerifier [0x00007FF66317FC5D+4074477]\n\tGetHandleVerifier [0x00007FF663177DDF+4042095]\n\tGetHandleVerifier [0x00007FF662E4A136+708806]\n\t(No symbol) [0x00007FF662D2CB0F]\n\t(No symbol) [0x00007FF662D27D14]\n\t(No symbol) [0x00007FF662D27E6C]\n\t(No symbol) [0x00007FF662D179A4]\n\tBaseThreadInitThunk [0x00007FF8E5D3257D+29]\n\tRtlUserThreadStart [0x00007FF8E63CAA58+40]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"077174ff4fca1ad9b6d3b12e1a14100d\")>\n\n    @pytest.mark.xfail(reason='Wait for fix bug')\n    def test_first(browser):\n        \"\"\"\n        Тест проверка FAQ\n        \"\"\"\n        browser.get(url=\"https://testqastudio.me/\")\n    \n        #menu-top [class*='menu-item-11088']\n        element = browser.find_element(by=By.CSS_SELECTOR, value='#menu-top [class*=\"menu-item-11088\"]')\n        element.click()\n    \n        assert browser.current_url == 'https://testqastudio.me/faq/', 'Unexpected url'\n    \n        faq_menu_2 = browser.find_element(by=By.XPATH, value='//*[contains(text(), \"Можно ли поставить доп.фурнитуру?\")]')\n>       faq_menu_2.click()\n\nSeleniumTest\\Tests\\Front\\test_shop.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E53F2FEDE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF662D179A4]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8E5D3257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8E63CAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <h2 class=\"faq-title\">...</h2> is not clickable at point (951, 599). Other element would receive the click: <div class=\"razzi-faq\">...</div>\nE         (Session info: chrome=122.0.6261.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6630F4C82+3505170]\nE       \t(No symbol) [0x00007FF662D20852]\nE       \t(No symbol) [0x00007FF662BD4145]\nE       \t(No symbol) [0x00007FF662C20C70]\nE       \t(No symbol) [0x00007FF662C1EA9B]\nE       \t(No symbol) [0x00007FF662C1C2A4]\nE       \t(No symbol) [0x00007FF662C1B035]\nE       \t(No symbol) [0x00007FF662C0F978]\nE       \t(No symbol) [0x00007FF662C3BE8A]\nE       \t(No symbol) [0x00007FF662C0F27A]\nE       \t(No symbol) [0x00007FF662C3C0A0]\nE       \t(No symbol) [0x00007FF662C583B2]\nE       \t(No symbol) [0x00007FF662C3BC33]\nE       \t(No symbol) [0x00007FF662C0D618]\nE       \t(No symbol) [0x00007FF662C0E6B1]\nE       \tGetHandleVerifier [0x00007FF6631267DD+3708781]\nE       \tGetHandleVerifier [0x00007FF66317FC5D+4074477]\nE       \tGetHandleVerifier [0x00007FF663177DDF+4042095]\nE       \tGetHandleVerifier [0x00007FF662E4A136+708806]\nE       \t(No symbol) [0x00007FF662D2CB0F]\nE       \t(No symbol) [0x00007FF662D27D14]\nE       \t(No symbol) [0x00007FF662D27E6C]\nE       \t(No symbol) [0x00007FF662D179A4]\nE       \tBaseThreadInitThunk [0x00007FF8E5D3257D+29]\nE       \tRtlUserThreadStart [0x00007FF8E63CAA58+40]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "\n    Тест проверка FAQ \n    ", "start": 1709041824128, "stop": 1709041828212, "uuid": "f7516798-d912-4bf5-b337-6b2fc4db4619", "historyId": "ef9812208e81c53299496b997bd06221", "testCaseId": "ef9812208e81c53299496b997bd06221", "fullName": "SeleniumTest.Tests.Front.test_shop#test_first", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Wait for fix bug')"}, {"name": "parentSuite", "value": "SeleniumTest.Tests.Front"}, {"name": "suite", "value": "test_shop"}, {"name": "host", "value": "Comp"}, {"name": "thread", "value": "32260-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "SeleniumTest.Tests.Front.test_shop"}]}